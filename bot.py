# -*- coding: utf-8 -*-
import vk_api
import time
import random
import os
import loguru

from vkbottle.bot import Bot, Message, MessageEvent, rules
from vkbottle.api import API
from vkbottle.dispatch.rules.base import ChatActionRule
from vkbottle_types.objects import MessagesMessageActionStatus
from vkbottle.tools import DocMessagesUploader, PhotoMessageUploader
from vkbottle import Callback, GroupEventType, Keyboard, KeyboardButtonColor, VKAPIError

from config import *

from modules.user_name_id import get_user_name, user_id_get_mes, get_user_id
from modules.vk_reg import data_reg

from utils.audio_settings import get_audio_setting, save_settings_audio
from utils.audiomsg_settings import get_audio_message_setting, save_settings_audio_message
from utils.blocked_users import blocked_users, save_blocked_users
from utils.blocked_words import load_blocked_words, save_blocked_words
from utils.chat_settings import save_chat_settings_to_file
from utils.close_settings import get_close_setting, save_settings_close
from utils.closechat_settings import get_close_chat_setting, save_close_chat
from utils.doc_settings import get_doc_setting, save_settings_doc
from utils.graffiti_settings import get_graffiti_setting, save_settings_graffiti
from utils.invite_community import get_invite_community_setting, save_settings
from utils.kickall_settings import get_kickall_setting, save_settings_kickall
from utils.lensms_settings import get_lensms_setting, set_lensms_setting, save_lensms_settings  
from utils.log import save_message, get_logs
from utils.mute import remove_mute_entry, mute_save, get_mute
from utils.muted_users import save_muted_users, muted_users
from utils.photo_settings import get_photo_setting, save_settings_photo
from utils.ruletka_settings import get_ruletka_setting, save_settings_ruletka
from utils.save_load_chat_settings import save_chat_settings_to_file, load_chat_settings_once
from utils.spam_settings import get_spam_setting, save_settings_spam
from utils.sticker_settings import get_stick_setting, save_settings_stick
from utils.treshold_settings import get_message_threshold_setting, set_message_threshold_setting
from utils.video_settings import get_video_setting, save_settings_video

from json_utils.json_struc import (
    invite_settings,
    close_chat_settings,
    close_settings,
    spam_settings,
    ruletka_settings,
    stick_settings,
    photo_settings,
    audio_settings,
    video_settings,
    audio_message_settings,
    graffiti_settings,
    doc_settings,
    lensms_settings,
    blocked_words_dict,
    chat_settings,
    kickall_settings
)

api = API(token_user)
token = token_user
tokenbot = token_bot
bot = Bot(token_bot)

vk_session = vk_api.VkApi(token=token)
vk = vk_session.get_api()
vk_session_bot = vk_api.VkApi(token=tokenbot)
vkbot = vk_session.get_api()

doc_uploader = DocMessagesUploader(bot.api)
photo_uploader = PhotoMessageUploader(bot.api)

loguru.logger.disable("vkbottle")

@bot.on.chat_message(text=['<pref>—Ä–µ–≥' for pref in prefixes])
async def regg(message: Message):
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    await message.reply(data_reg(user_id, target))


@bot.on.chat_message(text=['<pref>—Ä–µ–≥ <url>' for pref in prefixes])
async def regg(message: Message, url: str):
    user_id = get_user_id(url)[0]
    target = await get_user_name(user_id)
    await message.reply(data_reg(user_id, target))


@bot.on.chat_message(text=['<pref>–ø–∏–Ω–≥' for pref in prefixes])
async def pingbota(message: Message):
    delta = round(time.time() - message.date, 2)
    if message.from_id in owners:
        start_time = time.time()
        await bot.api.messages.get_conversations()
        end_time = time.time()
        execution_time = end_time - start_time 
        rounded_execution_time = round(execution_time, 2)
        await message.reply(f'üîß –ü–æ–Ω–≥!\ndb: {delta}ms | API: {rounded_execution_time}ms')
    else:
        await message.answer(f'üîß –ü–æ–Ω–≥!\ndb: {delta}ms')

@bot.on.chat_message(text=['<pref>+–∞—Å' for pref in prefixes])
async def asus(message: Message):
    if message.from_id not in owners:
        return
    user = await user_id_get_mes(message)
    targ = await get_user_name(user)
    if user in owners:
        return
    if user in blocked_users:
        await message.reply(f'üí¨ {targ} —É–∂–µ –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –¥–æ–±–∞–≤–ª–µ–Ω —Å–ø–∞–º-–ª–∏—Å—Ç.\n\n#{user}')
    blocked_users.append(user)
    save_blocked_users(blocked_users)


@bot.on.chat_message(text=['<pref>-–∞—Å' for pref in prefixes])
async def asus(message: Message):
    if message.from_id not in owners:
        return
    user = await user_id_get_mes(message)
    targ = await get_user_name(user)
    if user in owners:
        return
    if user not in blocked_users:
        await message.reply(f'‚ùå {targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∞–º-–ª–∏—Å—Ç–∞.')
    blocked_users.remove(user)
    save_blocked_users(blocked_users)


@bot.on.chat_message(text=['<pref>+–∞—Å <url>' for pref in prefixes])
async def asus(message: Message, url: str):
    if message.from_id not in owners:
        return
    user = get_user_id(url)[0]
    targ = await get_user_name(user)
    if user in owners:
        return
    if user in blocked_users:
        await message.reply(f'üí¨ {targ} —É–∂–µ –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –¥–æ–±–∞–≤–ª–µ–Ω —Å–ø–∞–º-–ª–∏—Å—Ç.\n\n#{user}')
    blocked_users.append(user)
    save_blocked_users(blocked_users)


@bot.on.chat_message(text=['<pref>-–∞—Å <url>' for pref in prefixes])
async def asus(message: Message, url: str):
    if message.from_id not in owners:
        return
    user = get_user_id(url)[0]
    targ = await get_user_name(user)
    if user in owners:
        return
    if user not in blocked_users:
        await message.reply(f'‚ùå {targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∞–º-–ª–∏—Å—Ç–∞.')
    blocked_users.remove(user)
    save_blocked_users(blocked_users)


#-------------#
@bot.on.chat_message(text=['–º—É—Ç', '–ú—É—Ç'])
async def asus22(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            user = await user_id_get_mes(message)
            targ = await get_user_name(user)
            if user in muted_users:
                await message.reply(f'üí¨ {targ} —É–∂–µ –≤ –º—É—Ç-–ª–∏—Å—Ç–µ.')
                return
            
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
            mute_save(message.peer_id, user, timestamp)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
            
            await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –¥–æ–±–∞–≤–ª–µ–Ω –º—É—Ç-–ª–∏—Å—Ç.\n\n#{user}')
            muted_users.append(user)
            save_muted_users(muted_users)
    
@bot.on.chat_message(text=['-–º—É—Ç'])
async def asus23(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            user = await user_id_get_mes(message)
            targ = await get_user_name(user)
            if user not in muted_users:
                await message.reply(f'‚ùå {targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º—É—Ç-–ª–∏—Å—Ç–µ.')
                return
            
            muted_users.remove(user)
            save_muted_users(muted_users)
            
            remove_mute_entry(message.peer_id, user)  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –º—É—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
            await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} —É–¥–∞–ª–µ–Ω –∏–∑ –º—É—Ç-–ª–∏—Å—Ç–∞.')

@bot.on.chat_message(text=['–º—É—Ç <url>', '–ú—É—Ç <url>'])
async def asus24(message: Message, url: str):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            user = get_user_id(url)[0]
            targ = await get_user_name(user)
            if user in muted_users:
                await message.reply(f'üí¨ {targ} —É–∂–µ –≤ –º—É—Ç-–ª–∏—Å—Ç–µ.')
                return
            
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
            mute_save(message.peer_id, user, timestamp)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –º—É—Ç–∞
            
            await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –¥–æ–±–∞–≤–ª–µ–Ω –º—É—Ç-–ª–∏—Å—Ç.\n\n#{user}')
            muted_users.append(user)
            save_muted_users(muted_users)

@bot.on.chat_message(text=['-–º—É—Ç <url>'])
async def asus25(message: Message, url: str):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            user = get_user_id(url)[0]
            targ = await get_user_name(user)
            if user not in muted_users:
                await message.reply(f'‚ùå {targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º—É—Ç-–ª–∏—Å—Ç–µ.')
                return
            
            muted_users.remove(user)
            save_muted_users(muted_users)
            
            remove_mute_entry(message.peer_id, user)  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –º—É—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
            await message.reply(f'üõ° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} —É–¥–∞–ª–µ–Ω –∏–∑ –º—É—Ç-–ª–∏—Å—Ç–∞.')


@bot.on.chat_message(text=['–º—É—Ç–ª–∏—Å—Ç', '–ú—É—Ç–ª–∏—Å—Ç'])
async def mute_list(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            muted_users = get_mute(message.peer_id)
            if not muted_users:
                await message.reply("–í –º—É—Ç-–ª–∏—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
            
            response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º—É—Ç–µ:\n"
            for mute_entry in muted_users:
                timestamp = time.strptime(mute_entry["timestamp"], '%Y-%m-%d %H:%M:%S')
                sender_id = mute_entry['sender_id']
                sender_name = await get_user_name(sender_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_info = f"{time.strftime('%d:%m:%Y %H:%M:%S', timestamp)} | {sender_name}"
                response += f"{user_info}\n"
            
            await message.reply(response)
#--------------#

@bot.on.chat_message(text=['<pref>–º—É–∑—ã–∫–∞ <author>' for pref in prefixes])
async def handle_music(message: Message, author: str):
    try:
        response = await api.request("audio.search", {"q": author, "count": 50})
        if 'response' in response and 'items' in response['response']:
            tracks = response['response']['items']
            if tracks:
                random_tracks = random.sample(tracks, 5)
                attachments = ",".join([f"audio{track['owner_id']}_{track['id']}" for track in random_tracks])
                await message.reply(f"‚åõ –í–æ—Ç 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –æ—Ç ¬´{author}¬ª:\n\n", attachment=attachments)
            else:
                await message.answer(f"‚åõ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—Ä–µ–∫–∏ –æ—Ç ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        await message.answer(f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {str(e)}")

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 1 –≤–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            invite_settings[chat_id] = True
            save_settings()
            await message.reply("üõ° –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.")

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 1 –≤—ã–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            invite_settings[chat_id] = False
            save_settings()
            await message.reply("üõ° –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")

# -------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 2 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            spam_settings[chat_id] = True
            save_settings_spam()
            await message.reply("üõ° –ê–Ω—Ç–∏—Å–ø–∞–º –≤—ã–∫–ª—é—á–µ–Ω.")

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 2 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            spam_settings[chat_id] = False
            save_settings_spam()
            await message.reply("üõ° –ê–Ω—Ç–∏—Å–ø–∞–º –≤–∫–ª—é—á–µ–Ω.")

@bot.on.chat_message(text=['<pref>—Ä—É–ª–µ—Ç–∫–∞ –≤—ã–∫–ª' for pref in prefixes])
async def enable_ruletka_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            ruletka_settings[chat_id] = True
            save_settings_ruletka()
            await message.reply("üõ° –†—É–ª–µ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@bot.on.chat_message(text=['<pref>—Ä—É–ª–µ—Ç–∫–∞ –≤–∫–ª' for pref in prefixes])
async def disable_ruletka_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            ruletka_settings[chat_id] = False
            save_settings_ruletka()
            await message.reply("üõ° –†—É–ª–µ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.")

# -------------------#
@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 10 –≤—ã–∫–ª' for pref in prefixes])
async def enable_close_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            close_settings[chat_id] = True
            save_settings_close()
            await message.reply("üõ° –ó–∞–ø—Ä–µ—Ç –∏–Ω–≤–∞–π—Ç —é–∑–µ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 10 –≤–∫–ª' for pref in prefixes])
async def disable_close_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            close_settings[chat_id] = False
            save_settings_close()
            await message.reply("üõ° –ó–∞–ø—Ä–µ—Ç –∏–Ω–≤–∞–π—Ç —é–∑–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω.\nüîß –í —á–∞—Ç–∞—Ö –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞.")


# -------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 3 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            stick_settings[chat_id] = True
            save_settings_stick()
            await message.reply("üõ° –°—Ç–∏–∫–µ—Ä—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 3 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            stick_settings[chat_id] = False
            save_settings_stick()
            await message.reply("üõ° –°—Ç–∏–∫–µ—Ä—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 4 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            photo_settings[chat_id] = True
            save_settings_photo()
            await message.reply("üõ° –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 4 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            photo_settings[chat_id] = False
            save_settings_photo()
            await message.reply("üõ° –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 5 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            doc_settings[chat_id] = True
            save_settings_doc()
            await message.reply("üõ° –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 5 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            doc_settings[chat_id] = False
            save_settings_doc()
            await message.reply("üõ° –î–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")


# ---------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 6 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            audio_settings[chat_id] = True
            save_settings_audio()
            await message.reply("üõ° –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 6 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            audio_settings[chat_id] = False
            save_settings_audio()
            await message.reply("üõ° –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")


# ---------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 7 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            video_settings[chat_id] = True
            save_settings_video()
            await message.reply("üõ° –í–∏–¥–µ–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 7 –≤–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            video_settings[chat_id] = False
            save_settings_video()
            await message.reply("üõ° –í–∏–¥–µ–æ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")

#----------------------#

@bot.on.chat_message(text=['<pref>–∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç' for pref in prefixes])
async def enable_close_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            close_chat_settings[chat_id] = True
            save_close_chat()
            await message.reply("üõ° –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è. –ü–∏—Å–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")


@bot.on.chat_message(text=['<pref>–æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç' for pref in prefixes])
async def enable_close_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            close_chat_settings[chat_id] = False
            save_close_chat()
            await message.reply("üõ° –ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è.")

# ---------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 8 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            audio_message_settings[chat_id] = True
            save_settings_audio_message()
            await message.reply("üõ° –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 8 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            audio_message_settings[chat_id] = False
            save_settings_audio_message()
            await message.reply("üõ° –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")
# ---------------------#
@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 9 –≤–∫–ª' for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            graffiti_settings[chat_id] = False
            save_settings_graffiti()
            await message.reply("üõ° –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã.")

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 9 –≤—ã–∫–ª' for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            graffiti_settings[chat_id] = True
            save_settings_graffiti()
            await message.reply("üõ° –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")

@bot.on.chat_message(attachment='sticker')
async def stickers(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_stick_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –°—Ç–∏–∫–µ—Ä—ã –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='photo')
async def photos(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_photo_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='doc')
async def docs(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_photo_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –î–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='audio')
async def audio(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_audio_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='video')
async def docs(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_video_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –í–∏–¥–µ–æ –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='audio_message')
async def docs(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_audio_message_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


@bot.on.chat_message(attachment='graffiti')
async def docs(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    user = message.from_id
    targ = await get_user_name(user)
    if get_graffiti_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                return
        try:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user, "chat_id": chat_id})
            await message.answer(f'üö∑ –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏ –±—ã–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {targ}.')
            await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
        except ZeroDivisionError:
            print('')


# -------------------#
@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"error": "snackbar"}),
)
async def show_snackbar(event: MessageEvent):
    await event.show_snackbar("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")


@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "close"}),
)
async def edit_message(event: MessageEvent):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=event.object.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if event.object.from_id == admin.member_id:
            text_lines = [
                'üóÉ –°–≤–µ–¥–µ–Ω–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.',
                '‚öô –°–æ–≤–µ—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å <<.–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 2 –≤–∫–ª>> –¥–ª—è –∑–∞—â–∏—Ç—ã —á–∞—Ç–∞.'
                '‚öô –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ <<.–Ω–∞—Å—Ç—Ä–æ–π–∫–∏>>',
                '',
                'üìú –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: –°–°–´–õ–ö–ê',
                'üë®‚Äç‚öñ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–û–¢–ê: –°–°–´–õ–ö–ê']
            text = "\n".join(text_lines)
            await event.edit_message(text)
            time.sleep(1)
            chat_info_response = await bot.api.messages.get_conversations_by_id(
                peer_ids=[event.object.peer_id],
                extended=1
            )
            chat_info = chat_info_response.items[0]
            chat_id = event.object.peer_id - 2000000000
            profiles_response = await bot.api.messages.get_conversation_members(
                peer_id=event.object.peer_id
            )
            profiles = profiles_response.profiles
            for profile in profiles:
                if profile.id in blocked_users:
                    target = await get_user_name(profile.id)
                    await bot.api.messages.remove_chat_user(
                        member_id=profile.id,
                        chat_id=chat_id
                    )
                    await bot.api.messages.send(
                        peer_id=event.object.peer_id,
                        random_id=0,
                        message=f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.'
                    )


@bot.on.chat_message(text=["<pref>–æ–±–Ω–æ–≤–∏—Ç—å—á–∞—Ç" for pref in prefixes])
async def obnova_chata(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            time.sleep(1)
            chat_info_response = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
            chat_info = chat_info_response.items[0]
            chat_id = message.peer_id - 2000000000
            profiles_response = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            profiles = profiles_response.profiles
            if get_spam_setting(chat_id):
                await message.reply('üóÉ –°–≤–µ–¥–µ–Ω–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.')
                return
            for profile in profiles:
                if profile.id in blocked_users:
                    try:
                        await message.reply('üóÉ –°–≤–µ–¥–µ–Ω–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.')
                        target = await get_user_name(profile.id)
                        await message.ctx_api.request("messages.removeChatUser",
                                                      {"member_id": profile.id, "chat_id": chat_id})
                        await message.answer(
                            f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                    except ZeroDivisionError:
                        print('')


@bot.on.message(ChatActionRule(MessagesMessageActionStatus.CHAT_INVITE_USER.value))
async def invitedbot(message: Message) -> None:
    if (
            message.action is not None
            and message.group_id is not None
            and message.action.member_id > 0
    ):
        user_id = message.action.member_id
        chat_id = message.peer_id - 2000000000
        target = await get_user_name(user_id)
        close_setting = get_close_setting(chat_id)
        if not close_setting:
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": chat_id})
            await message.answer(
                'üö∑ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç –±—ã–ª–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.\n–û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—â–∏—Ç—É:\n!–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 10 –≤—ã–∫–ª')
        if not get_spam_setting(chat_id):
            if user_id in blocked_users:
                chat_id = message.peer_id - 2000000000
                await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": chat_id})
                await message.answer(
                    f"üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
            else:
                print(f"""üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.""")
    if (
            message.action is not None
            and message.group_id is not None
            and message.action.member_id < 0
    ):
        user_id = message.action.member_id
        chat_id = message.peer_id - 2000000000
        if not get_invite_community_setting(chat_id):
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": chat_id})
            await message.answer(
                'üö∑ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: !–∏–Ω–≤–∞–π—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤ –≤—ã–∫–ª')

    if (
            message.action is not None
            and message.group_id is not None
            and message.action.member_id == -GROUP_ID_FOR_INVITE
    ):
        text_lines = [
            '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!',
            '–ú–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è —Ä–∞–±–æ—Ç–∞–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ (–∏–ª–∏ –∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å <<.–æ–±–Ω–æ–≤–∏—Ç—å—á–∞—Ç>>).',
            '',
            '‚öô –°–æ–≤–µ—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å <<.–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 2 –≤–∫–ª>> –¥–ª—è –∑–∞—â–∏—Ç—ã —á–∞—Ç–∞.',
            '‚öô –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ <<.–Ω–∞—Å—Ç—Ä–æ–π–∫–∏>>.',
            '',
            'üìú –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: –°–°–´–õ–ö–ê',
            'üë®‚Äç‚öñ –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–û–¢–ê: –°–°–´–õ–ö–ê'
        ]
        text = "\n".join(text_lines)
        attachment = "—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É"
        KEYBOARD = (
            Keyboard(one_time=False, inline=True)
            .add(Callback("‚öô –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç", payload={"cmd": "close"}))
            .get_json()
        )
        await message.answer(text, attachment, keyboard=KEYBOARD)

@bot.on.message(ChatActionRule(MessagesMessageActionStatus.CHAT_KICK_USER.value))
async def leave(message: Message) -> None:
     if (
            message.action is not None
            and message.group_id is not None 
            and message.action.member_id > 0
    ):
        user_id = message.action.member_id
        target = await get_user_name(user_id)
        print(f"""üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.""")

@bot.on.chat_message(text=['<pref>–∑–∞–ø—Ä–µ—Ç–∏—Ç—å—Å–ª–æ–≤–æ <word>' for pref in prefixes])
async def zapret(message: Message, word: str):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            global blocked_words_dict
            if chat_id not in blocked_words_dict:
                blocked_words_dict[chat_id] = load_blocked_words(chat_id)
            word_lower = word.lower()
            if word_lower not in blocked_words_dict[chat_id]:
                blocked_words_dict[chat_id].append(word_lower)
                save_blocked_words(chat_id, blocked_words_dict[chat_id])
                await message.reply(
                    f'üõ° –°–ª–æ–≤–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.')
            else:
                await message.reply(f'üõ° –°–ª–æ–≤–æ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.')


@bot.on.chat_message(text=['<pref>—Ä–∞–∑—Ä–µ—à–∏—Ç—å—Å–ª–æ–≤–æ <word>' for pref in prefixes])
async def razreshit(message: Message, word: str):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            blocked_words = load_blocked_words(chat_id)
            word_lower = word.lower()
            if word_lower in blocked_words:
                blocked_words.remove(word_lower)
                save_blocked_words(chat_id, blocked_words)
                await message.reply(f'üõ° –°–ª–æ–≤–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.')
            else:
                await message.reply(f'üõ° –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.')


@bot.on.chat_message(text=['<pref>–∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ—Å–ª–æ–≤–∞' for pref in prefixes])
async def show_blocked_words(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            blocked_words = load_blocked_words(chat_id)
            if not blocked_words:
                await message.reply("üõ° –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")
            else:
                blocked_words_str = "\n".join(blocked_words)
                await message.reply(f"üõ° –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤:\n{blocked_words_str}")


@bot.on.chat_message(text=['<pref>–æ—á–∏—Å—Ç–∏—Ç—å—Å–ª–æ–≤–∞' for pref in prefixes])
async def clear_blocked_words(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            save_blocked_words(chat_id, [])
            await message.reply("üõ° –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –±—ã–ª –æ—á–∏—â–µ–Ω.")


# ------------------------------------------------------------------------#

@bot.on.chat_message(text=['<pref>–∫–æ–º–∞–Ω–¥—ã' for pref in prefixes])
async def send_callback_button(message: Message):
    await message.reply("üìú –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: –°–°–´–õ–ö–ê")


# ------------------------------------------------------------------------#

KEYBOARD = (
    Keyboard(one_time=False, inline=True)
    .add(Callback("‚öô", payload={"cmd": "tipanu"}))
    .get_json()
)


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' for pref in prefixes])
async def send_callback_button(message: Message):
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞:", keyboard=KEYBOARD)


@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"cmd": "tipanu"}),
)
async def edit_invite_settings(event: MessageEvent):
    chat_id = event.object.peer_id - 2000000000
    text = "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã —á–∞—Ç–∞:\n"

    text += "1. –ó–∞–ø—Ä–µ—Ç –∏–Ω–≤–∞–π—Ç –≥—Ä—É–ø–ø: "
    if get_invite_community_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "2. –ê–Ω—Ç–∏—Å–ø–∞–º: "
    if get_spam_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "3. –°—Ç–∏–∫–µ—Ä—ã: "
    if get_stick_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "4. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: "
    if get_photo_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "5. –î–æ–∫—É–º–µ–Ω—Ç—ã: "
    if get_doc_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "6. –ê—É–¥–∏–æ: "
    if get_audio_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "7. –í–∏–¥–µ–æ: "
    if get_video_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "8. –ì–æ–ª–æ—Å–æ–≤—ã–µ: "
    if get_audio_message_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "9. –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏: "
    if get_doc_setting(chat_id):
        text += "‚ùå\n"
    else:
        text += "‚úÖ\n"

    text += "10. –ò–Ω–≤–∞–π—Ç —é–∑–µ—Ä–æ–≤: "
    if get_close_setting(chat_id):
        text += "‚úÖ\n"
    else:
        text += "‚ùå\n"

    message_threshold = chat_settings.get(chat_id, {}).get("message_threshold")
    text += f"11. –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {'‚ùå' if message_threshold is None else message_threshold} —Å–µ–∫\n"
    message_length = lensms_settings.get(chat_id, 4096)
    text += f"12. –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_length} —Å–∏–º–≤–æ–ª–æ–≤\n"

    text += "13. –ß–∞—Ç: "
    if get_close_chat_setting(chat_id):
        text += "–ó–∞–∫—Ä—ã—Ç\n"
    else:
        text += "–û—Ç–∫—Ä—ã—Ç\n"

    await event.edit_message(text)


# ------------------------------------------------------------------------#

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 11 <threshold:int>' for pref in prefixes])
async def set_message_threshold(message: Message, threshold: int):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            set_message_threshold_setting(chat_id, threshold)
            save_chat_settings_to_file()
            await message.reply(
                f"üõ° –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ {threshold} —Å–µ–∫.")


@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 12 <threshold:int>' for pref in prefixes])
async def set_message_length(message: Message, threshold: int):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            set_lensms_setting(chat_id, threshold)
            save_lensms_settings()
            await message.reply(
                f"üõ° –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {threshold} —Å–∏–º–≤–æ–ª–æ–≤.")


@bot.on.chat_message(text=["<pref>–∫–æ–º–∞–Ω–¥–∞ –∫–∏–∫–≤—Å–µ—Ö –≤—ã–∫–ª" for pref in prefixes])
async def enable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            kickall_settings[chat_id] = True
            save_settings_kickall()
            await message.reply("üõ° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞.")


@bot.on.chat_message(text=["<pref>–∫–æ–º–∞–Ω–¥–∞ –∫–∏–∫–≤—Å–µ—Ö –≤–∫–ª" for pref in prefixes])
async def disable_invite_community(message: Message):
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            chat_id = message.peer_id - 2000000000
            kickall_settings[chat_id] = False
            save_settings_kickall()
            await message.reply("üõ° –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–µ–Ω–∞.")


@bot.on.chat_message(text=['<pref>—á–∏—Å—Ç–∫–∞ –∫–∏–∫–≤—Å–µ—Ö' for pref in prefixes])
async def kickall(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_kickall_setting(chat_id):
        await message.reply('üõ° –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç—å:\n!–∫–æ–º–∞–Ω–¥–∞ –∫–∏–∫–≤—Å–µ—Ö –≤–∫–ª')
        return
    chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    admins = [member for member in chat_info.items if member.is_admin]
    for admin in admins:
        if message.from_id == admin.member_id:
            sender = message.from_id
            send = await get_user_name(sender)
            chat_info = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
            members_count = chat_info.items[0].chat_settings.members_count
            chat_id = message.peer_id - 2000000000
            profiles = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            await message.answer(f'üí¨ {send} –∑–∞–ø—É—Å–∫–∞–µ—Ç —á–∏—Å—Ç–∫—É –≤—Å–µ–≥–æ —á–∞—Ç–∞. –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.')
            time.sleep(3)
            for profile in profiles.profiles:
                if profile.id > 0:
                    try:
                        await bot.api.messages.remove_chat_user(
                            chat_id=chat_id,
                            member_id=profile.id
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {profile.id}: {e}")



@bot.on.chat_message(text=['<pref>—Ä–∞–Ω–¥–æ–º—Ö–µ–ª–ø' for pref in prefixes])
async def helprand(message: Message):
    await message.reply('!—Ä–∞–Ω–¥–æ–º—á–∏—Å–ª–æ <num1:int> <num2:int> <count:int> -- –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ.\n<num1> - —á–∏—Å–ª–æ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ <num2> - —á–∏—Å–ª–æ, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–Ω–¥–æ–º–∞. <count> - —á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ (—Ä–∞–Ω–¥–æ–º–Ω—ã—Ö) —á–∏—Å–µ–ª –≤—ã–≤–µ–¥–µ—Ç –±–æ—Ç.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <count> - 5.')

@bot.on.chat_message(text=['<pref>—Ä–∞–Ω–¥–æ–º—á–∏—Å–ª–æ <num1:int> <num2:int> <count:int>' for pref in prefixes])
async def numbers(message: Message, num1: int, num2: int, count: int):
    if count > 5:
        await message.reply(f'üõ° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ <<count>> 5. –í–≤–µ–¥–∏—Ç–µ:\n!—Ä–∞–Ω–¥–æ–º—Ö–µ–ª–ø')
        return
    colors = [KeyboardButtonColor.PRIMARY, KeyboardButtonColor.SECONDARY, KeyboardButtonColor.NEGATIVE, KeyboardButtonColor.POSITIVE]
    keyboard = Keyboard(one_time=False, inline=True)
    for i in range(count):
        random_number = random.randint(num1, num2)
        color = colors[i % len(colors)]
        keyboard.add(Callback(f"{random_number}", payload={"game": "rundoms", "number": random_number}), color=color)  
    await message.reply("–†–∞–Ω–¥–æ–º–Ω—ã–µ —á–∏—Å–ª–∞:", keyboard=keyboard.get_json())

@bot.on.chat_message(text=['<pref>–∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å' for pref in prefixes])
async def admins(message: Message):
    keyboard = Keyboard(inline=True, one_time=False)
    keyboard.add(Callback("hide", payload={"action": "hide"}))
    keyboard.add(Callback("del db", payload={"action": "delete"}))
    keyboard.add(Callback("stop", payload={"action": "stop"}))
    keyboard.add(Callback("ids", payload={"action": "show_ids"}))
    await message.reply("ADMIN:", keyboard=keyboard.get_json())

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"action": "hide"}),
)
async def send_chat_members(event: MessageEvent):
    user_id = event.user_id
    if user_id not in super_owners:
        return
    await event.edit_message(':D')

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"action": "show_ids"}),
)
async def send_chat_members(event: MessageEvent):
    user_id = event.user_id
    if user_id not in super_owners:
        return
    chat_info = await bot.api.messages.get_conversations_by_id(peer_ids=[event.peer_id], extended=1)
    members_count = chat_info.items[0].chat_settings.members_count
    chat_id = event.peer_id - 2000000000
    profiles = await bot.api.messages.get_conversation_members(peer_id=event.peer_id)
    for profile in profiles.profiles:
        if profile.id > 0:
            members_ids = [profile.id for profile in profiles.profiles if profile.id > 0]
    await bot.api.messages.send(user_id=ownertop, random_id=0, message=f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {' '.join(map(str, members_ids))}")
    await event.edit_message(':D')

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"action": "stop"}),
)
async def delete_all_files(event: MessageEvent):
    user_id = event.user_id
    if user_id not in super_owners:
        return
    await event.send_message('üõ° –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    await event.edit_message(':D')
    exit()

@bot.on.raw_event(
    GroupEventType.MESSAGE_EVENT,
    MessageEvent,
    rules.PayloadRule({"action": "delete"}),
)
async def delete_all_files(event: MessageEvent):
    user_id = event.user_id
    if user_id not in super_owners:
        return
    folder_path = r'–ü–£–¢–¨'
    bot_file_name = 'bot.py'
    try:
        for file_name in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file_name)
            if os.path.isfile(file_path) and file_name != bot_file_name:
                os.remove(file_path)
    except Exception as e:
        await event.send_message(f'üõ°  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.')
        return
    await event.send_message('üõ° –í—Å–µ —Ñ–∞–π–ª—ã, –∫—Ä–æ–º–µ —Ñ–∞–π–ª–∞ –±–æ—Ç–∞, –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.')
    await event.edit_message(':D')

@bot.on.message(text=['<pref>—Ä—É–ª–µ—Ç–∫–∞' for pref in prefixes])
async def rul(message: Message):
    random1 = random.randint(0, 3)
    random2 = random.randint(0, 3)
    chat_id = message.peer_id - 2000000000
    user = message.from_id
    target = await get_user_name(user)
    if not get_ruletka_setting(chat_id):
        if random1 == random2:
            try:
                await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id, "chat_id": chat_id})
                await message.reply(f'üî´ {target} –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ —Ä—É–ª–µ—Ç–∫—É!\nüí¨ –ò –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω —Å —á–∞—Ç–∞ :(')
            except VKAPIError:
                print('')
        else:
            await message.reply('üí¨ –í–æ—Ç —ç—Ç–æ –≤–µ–∑–µ–Ω–∏–µ! –ü–æ–¥—É–º–∞–π –æ –º–∞–º–µ —Å –ø–∞–ø–æ–π –∏ –Ω–µ –ø—ã—Ç–∞–π—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ.')
    else:
        await message.reply('üí¨ –ö–∞–∫ –∂–∞–ª—å, —Ä—É–ª–µ—Ç–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –í–∫–ª—é—á–∏—Ç—å –µ—ë: !—Ä—É–ª–µ—Ç–∫–∞ –≤–∫–ª')

@bot.on.chat_message(text=['<pref>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–º–æ—â—å' for pref in prefixes])
async def help(message: Message):
    text = 'üîß –ö–∞–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–µ—Å–µ–¥—ã?\n–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∂–µ –≤–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –ø–æ–ª—å–∑—É–µ–º—Å—è: .–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–Ω–æ–º–µ—Ä) –≤–∫–ª/–≤—ã–∫–ª/params\n\nüí¨ –í–∫–ª - –≤–∫–ª—é—á–∞–µ—Ç. –í—ã–∫–ª - –≤—ã–∫–ª—é—á–∞–µ—Ç. Params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ö –ø—Ä–∏–º–µ—Ä—É:\n.–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 1 –≤–∫–ª\n.–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 11 6'
    await message.reply(text)

@bot.on.chat_message(text=['<pref>–ª–æ–≥–∏' for pref in prefixes])
async def log(message: Message):
    if message.from_id in owners:
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id == admin.member_id:
                peer_id = message.peer_id - 2000000000
                logs = get_logs(peer_id)
                if logs:
                    response = "‚úÖ –õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–≥–æ —á–∞—Ç–∞:\n"
                    for log in logs:
                        sender_name = await get_user_name(log["sender_id"])
                        response += f"{sender_name} | {log['timestamp']}: {log['text']}\n"
                else:
                    response = "üóØ –õ–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç—ã.\n–í–≤–µ–¥–∏—Ç–µ <<.–æ–±–Ω–æ–≤–∏—Ç—å—á–∞—Ç>>"
                await message.answer(response)

@bot.on.chat_message(text=['<pref>-—Å–º—Å' for pref in prefixes])
async def delete_message(message: Message):
    cmids: list[int] = []
    if m := message.reply_message:
        cmids = [m.conversation_message_id]
    elif message.fwd_messages:
        cmids = [m.conversation_message_id for m in message.fwd_messages]
    try:
        await bot.api.messages.delete(group_id=GROUP_ID, delete_for_all=True, peer_id=message.peer_id, cmids=cmids)
        await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except VKAPIError:
        await message.reply(f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ VK.')

@bot.on.chat_message(text=['<pref>-—Å–º—Å —Ç–∏—Ö–æ' for pref in prefixes])
async def delete_message(message: Message):
    cmids: list[int] = []
    if m := message.reply_message:
        cmids = [m.conversation_message_id]
    elif message.fwd_messages:
        cmids = [m.conversation_message_id for m in message.fwd_messages]
    await bot.api.messages.delete(group_id=GROUP_ID, delete_for_all=True, peer_id=message.peer_id, cmids=cmids)

@bot.on.message()
async def handle_message(message: Message):
    chat_id = message.peer_id - 2000000000
    if get_close_chat_setting(chat_id):
        chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        admins = [member for member in chat_info.items if member.is_admin]
        for admin in admins:
            if message.from_id != admin.member_id:
                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    if message.from_id in muted_users:
        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    save_message(message.peer_id - 2000000000, message.from_id, message.text)
    users = message.from_id
    target = await get_user_name(users)
    load_chat_settings_once()
    if chat_id not in chat_settings:
        chat_settings[chat_id] = {"message_threshold": 0, "last_message_time": 0}
    current_time = time.time()
    last_message_time = chat_settings[chat_id].get("last_message_time", 0)
    message_threshold = get_message_threshold_setting(chat_id)
    if current_time - last_message_time < message_threshold:
        if message.from_id > 0:
            chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            admins = [member for member in chat_info.items if member.is_admin]
            for admin in admins:
                if message.from_id != admin.member_id:
                    await message.ctx_api.request("messages.removeChatUser",{"member_id": message.from_id, "chat_id": chat_id})
                    await message.answer(f"üö∑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target}. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —á–∞—Ç–∞.")
                    await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
    chat_settings[chat_id]["last_message_time"] = current_time
    save_chat_settings_to_file()
    if message.from_id < 0:
        chat_id = message.peer_id - 2000000000
        if not get_invite_community_setting(chat_id):
            try:
                await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": chat_id})
                await message.answer('üö∑ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: !–∏–Ω–≤–∞–π—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤ –≤—ã–∫–ª')
            except ZeroDivisionError:
                print('')
            chat_info_response = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
            chat_info = chat_info_response.items[0]
            chat_id = message.peer_id - 2000000000
            profiles_response = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            profiles = profiles_response.profiles
            if not get_invite_community_setting(chat_id):
                for profile in profiles:
                    if profile.id in blocked_users:
                        try:
                            target = await get_user_name(profile.id)
                            await message.ctx_api.request("messages.removeChatUser",
                                                          {"member_id": profile.id, "chat_id": chat_id})
                            await message.answer(
                                'üö∑ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: !–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 1 –≤—ã–∫–ª')
                        except ZeroDivisionError:
                            print('')
                            return
    if message.from_id > 0:
        max_message_length = get_lensms_setting(message.peer_id - 2000000000)
        if len(message.text) > max_message_length:
            chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            admins = [member for member in chat_info.items if member.is_admin]
            for admin in admins:
                if message.from_id != admin.member_id:
                    targ = await get_user_name(message.from_id)
                    await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id, "chat_id": chat_id})
                    await message.answer(f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –Ω–∞—Ä—É—à–∏–ª –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–∫–ª—é—á–∞—é —Å —á–∞—Ç–∞.')
                    await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
                    return
        user_id = message.from_id
        target = await get_user_name(user_id)
        chat_id = message.peer_id - 2000000000
        blocked_words = load_blocked_words(chat_id)
        if not get_spam_setting(chat_id):
            if user_id in blocked_users:
                try:
                    chat_id = message.peer_id - 2000000000
                    await message.ctx_api.request("messages.removeChatUser",{"member_id": user_id, "chat_id": message.peer_id - 2000000000})
                    await message.answer(f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                    await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
                    return
                except ZeroDivisionError:
                    print('')
                    return
        for word in blocked_words:
            if word.lower() in message.text.lower():
                chat_info = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
                admins = [member for member in chat_info.items if member.is_admin]
                for admin in admins:
                    if message.from_id != admin.member_id:
                        if message.from_id > 0:
                            try:
                                chat_id = message.peer_id - 2000000000
                                sender = await get_user_name(message.from_id)
                                await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id, "chat_id": message.peer_id - 2000000000})
                                await message.answer(
                                    f'üö∑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ ¬´{word}¬ª. –ò—Å–∫–ª—é—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
                                await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
                            except ZeroDivisionError:
                                print('')
                                return
        if not get_spam_setting(chat_id):
            if message.from_id in blocked_users:
                try:
                    chat_id = message.peer_id - 2000000000
                    target = message.from_id
                    targ = await get_user_name(target)
                    await message.ctx_api.request("messages.removeChatUser", {"member_id": message.from_id,
                                                                              "chat_id": message.peer_id - 2000000000})
                    await message.answer(
                        f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {targ} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                    await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
                except ZeroDivisionError:
                    print('')
                    return
        chat_info_response = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
        chat_info = chat_info_response.items[0]
        chat_id = message.peer_id - 2000000000
        profiles_response = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        profiles = profiles_response.profiles
        if not get_spam_setting(chat_id):
            for profile in profiles:
                if profile.id in blocked_users:
                    try:
                        chat_id = message.peer_id - 2000000000
                        target = await get_user_name(profile.id)
                        await message.ctx_api.request("messages.removeChatUser",
                                                    {"member_id": profile.id, "chat_id": chat_id})
                        await message.answer(
                            f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                        await bot.api.messages.delete(peer_id=message.peer_id, delete_for_all=True, conversation_message_ids=[message.conversation_message_id])
                    except ZeroDivisionError:
                        print('')

bot.run_forever()