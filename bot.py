import requests
import vk_api
import time
import re
from datetime import datetime, timedelta
import pytz
import aiohttp
from vkbottle import GroupEventType
from vkbottle.bot import Bot, Message, rules
from bs4 import BeautifulSoup
import pyowm
from pyowm import OWM
from vkbottle.api import API
import random
import json
import asyncio
import sqlite3
import os
from os.path import exists
from vkbottle.dispatch.rules.base import ChatActionRule, FromUserRule
from vkbottle_types.objects import MessagesMessageActionStatus
import asyncio

api = API("")
token = ''
bot = Bot('')
owm = pyowm.OWM('')
super_owners = []
owners = []
owners.extend(super_owners)
mgr = owm.weather_manager()
RULES_FILE = "rules.json"
NOTES_FILE = "notes.json"
STATISTICA_FILE = 'static.json'
BLOCKED_USERS_FILE = 'blocked_users.json'
kick_all_enabled = False

def load_blocked_users():
    try:
        with open(BLOCKED_USERS_FILE, 'r') as file:
            blocked_users = json.load(file)
    except FileNotFoundError:
        blocked_users = []
    return blocked_users

def save_blocked_users(blocked_users):
    with open(BLOCKED_USERS_FILE, 'w') as file:
        json.dump(blocked_users, file)

blocked_users = load_blocked_users()

def load_notes():
    try:
        with open(NOTES_FILE, "r") as file:
            notes_data = json.load(file)
    except FileNotFoundError:
        notes_data = {"notes": []}
    return notes_data.get("notes", [])


def save_notes(notes):
    notes_data = {"notes": notes}
    with open(NOTES_FILE, "w") as file:
        json.dump(notes_data, file)


def load_rules():
    try:
        with open(RULES_FILE, "r") as file:
            rules = json.load(file)
    except FileNotFoundError:
        rules = []
    return rules


def save_rules(rules):
    with open(RULES_FILE, "w") as file:
        json.dump(rules, file)

def load_statistics():
    try:
        with open(STATISTICA_FILE, "r") as file:
            statistics = json.load(file)
    except FileNotFoundError:
        statistics = []
    return statistics

def save_statistics(statistics):
    with open(STATISTICA_FILE, "w") as file:
        json.dump(statistics, file)

statistics = load_statistics()
conn = sqlite3.connect('canto_bot.db')
cursor = conn.cursor()

try:
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        candies INTEGER,
                        last_bonus INTEGER
                    )''')
except sqlite3.OperationalError as e:
    print("Error:", e)

conn.commit()

cursor.execute('''CREATE TABLE IF NOT EXISTS users_info (
                    user_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    last_name TEXT
                )''')
conn.commit()

async def get_user_name(user_id: int) -> str:
    user_info = await bot.api.users.get(user_ids=user_id)
    if user_info:
        first_name = user_info[0].first_name
        last_name = user_info[0].last_name
        return f"[https://vk.com/id{user_id}|{first_name} {last_name}]"
    return f"[id{user_id}|Unknown]"

async def notify_receiver(receiver_id, sender_id, amount, comment=None):
    sender_info = await get_user_name(sender_id)
    message_text = f"üîî –í–∞—à –º–µ—à–æ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç–æ–∫!\nüí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
    if comment:
        message_text += f"\n\nüí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {comment}"
    await bot.api.messages.send(
        peer_id=receiver_id,
        message=message_text,
        from_id=ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞,
        random_id=0
    )


async def is_chat_admin(api, chat_id, user_id):
    response = await api.groups.get_members(group_id=chat_id, user_id=user_id)
    return response.get("items", [])[0].get("is_admin", False)


status_translation = {
    'clear sky': '—è—Å–Ω–æ–µ –Ω–µ–±–æ',
    'few clouds': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    'scattered clouds': '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
    'broken clouds': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
    'overcast clouds': '–ø–∞—Å–º—É—Ä–Ω–æ',
    'shower rain': '–ª–∏–≤–µ–Ω—å',
    'rain': '–¥–æ–∂–¥—å',
    'thunderstorm': '–≥—Ä–æ–∑–∞',
    'snow': '—Å–Ω–µ–≥',
    'light snow': '—Å–ª–∞–±—ã–π —Å–Ω–µ–≥',
    'mist': '—Ç—É–º–∞–Ω'
}

status_emojis = {
    '—è—Å–Ω–æ–µ –Ω–µ–±–æ': '‚òÄÔ∏è',
    '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'üå§Ô∏è',
    '—Ä–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞': '‚õÖ',
    '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': 'üå•Ô∏è',
    '–ø–∞—Å–º—É—Ä–Ω–æ': '‚òÅÔ∏è',
    '–ª–∏–≤–µ–Ω—å': 'üåßÔ∏è',
    '–¥–æ–∂–¥—å': 'üåßÔ∏è',
    '–≥—Ä–æ–∑–∞': '‚õàÔ∏è',
    '—Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '—Å–ª–∞–±—ã–π —Å–Ω–µ–≥': '‚ùÑÔ∏è',
    '—Ç—É–º–∞–Ω': 'üå´Ô∏è'
}


async def user_id_get_mes(message: Message):
    if message.reply_message == None:
        vk_user = message.from_id
    else:
        vk_user = message.reply_message.from_id
    return vk_user


def get_user_info(user_id):
    try:
        vk = vk_api.VkApi(token=token)
        user_info = vk.method('users.get', {"user_ids": user_id, "fields": "first_name,last_name"})
        if user_info:
            return user_info[0]
        else:
            return None
    except Exception as ex:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {ex}")
        return None

def get_user_id(text):
    result = []
    regex = r"(?:vk\.com\/(?P<user>[\w\.]+))|(?:\[id(?P<user_id>[\d]+)\|)"
    for user_domain, user_id in re.findall(regex, text):
        if user_domain:
            result.append(get_user_id_by_domain(user_domain))
        if user_id:
            result.append(int(user_id))
    _result = []
    for r in result:
        if r is not None:
            _result.append(r)
    return _result


def get_user_id_by_domain(user_domain: str):
    vk = vk_api.VkApi(token=token)
    obj = vk.method('utils.resolveScreenName', {"screen_name": user_domain})
    if isinstance(obj, list):
        return
    if obj['type'] == 'user':
        return obj["object_id"]


async def get_users_top(count=10):
    cursor.execute("SELECT user_id, candies FROM users WHERE candies > 1 ORDER BY candies DESC LIMIT ?", (count,))
    users = cursor.fetchall()
    return users


async def generate_top_message():
    users = await get_users_top()
    if not users:
        return "‚ò¢ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

    message = "‚ò¢ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç–∫–∞–º:\n"
    for idx, user in enumerate(users, start=1):
        user_id, candies = user
        user_info = await get_user_info(user_id)
        if user_info:
            first_name, last_name = user_info
            message += f"{idx}. [https://vk.com/id{user_id}|{first_name} {last_name}] - {candies} –º–æ–Ω–µ—Ç\n"
    return message


async def get_user_info(user_id):
    try:
        cursor.execute("SELECT first_name, last_name FROM users_info WHERE user_id = ?", (user_id,))
        user_info = cursor.fetchone()
        if user_info:
            return user_info[0], user_info[1]
        user = await bot.api.users.get(user_ids=user_id)
        first_name = user[0].first_name
        last_name = user[0].last_name
        cursor.execute("INSERT INTO users_info (user_id, first_name, last_name) VALUES (?, ?, ?)",
                       (user_id, first_name, last_name))
        conn.commit()
        return first_name, last_name
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        return None, None


async def get_user_candies(user_id):
    cursor.execute("SELECT candies FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0


@bot.on.message(text=['–∏–¥', '–ò–¥', 'id', 'Id', 'ID', '–ò–î', '–∞–π–¥–∏', '–ê–π–¥–∏'])
async def iduser(message: Message):
    user_id = await user_id_get_mes(message)
    await message.answer(f'üÜî [https://vk.com/id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] => {user_id}')

@bot.on.message(
    text=['–∏–¥ <url>', '–ò–¥ <url>', 'id <url>', 'Id <url>', 'ID <url>', '–ò–î <url>', '–∞–π–¥–∏ <url>', '–ê–π–¥–∏ <url>'])
async def iduser(message: Message, url: str):
    user_id = get_user_id(url)[0]
    await message.answer(f'üÜî [https://vk.com/id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] => {user_id}')

@bot.on.chat_message(text=['–ü–∏–Ω–≥', '–ø–∏–Ω–≥'])
async def pingbota(message: Message):
    delta = round(time.time() - message.date, 2)
    text = f'[ ‚úÖ ] –ü–û–ù–ì!\n[ ‚åõ ] –û—Ç–≤–µ—Ç –∑–∞ {delta} —Å–µ–∫—É–Ω–¥.\n[ ‚úÖ ] => –†–∞–±–æ—Ç–∞–µ—Ç'
    await message.reply(text)

@bot.on.message(text=['–∫–∏–∫', '–ö–∏–∫'])
async def kick_user(message: Message):
    if message.from_id in owners:
        user_id = await user_id_get_mes(message)
        await message.ctx_api.request("messages.removeChatUser",{"member_id": user_id, "chat_id": message.peer_id - 2000000000})
    else:
        print('')

@bot.on.message(text=['–∫–∏–∫ <url>', '–ö–∏–∫ <url>'])
async def kick_user(message: Message, url: str):
    if message.from_id in owners:
        user_id = get_user_id(url)[0]
        await message.ctx_api.request("messages.removeChatUser",{"member_id": user_id, "chat_id": message.peer_id - 2000000000})
    else:
        print('')

@bot.on.message(text=['!+–∞—Å', '!+–ê—Å'])
async def asus(message: Message):
    if message.from_id not in owners:
        return
    user = await user_id_get_mes(message)
    targ = await get_user_name(user)
    if user in owners:
        return
    if user in blocked_users:
        await message.answer(f'{targ} —É–∂–µ –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.answer(f'–î–æ–±–∞–≤–∏–ª {targ} –≤ —Å–ø–∞–º-–ª–∏—Å—Ç.')
    blocked_users.append(user)
    save_blocked_users(blocked_users)

@bot.on.message(text=['!-–∞—Å', '!-–ê—Å'])
async def asus(message: Message):
    if message.from_id not in owners:
        return
    user = await user_id_get_mes(message)
    targ = await get_user_name(user)
    if user in owners:
        return
    if user not in blocked_users:
        await message.answer(f'{targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.answer(f'–£–¥–∞–ª–∏–ª {targ} –∏–∑ —Å–ø–∞–º-–ª–∏—Å—Ç–∞.')
    blocked_users.remove(user)
    save_blocked_users(blocked_users)

@bot.on.message(text=['!+–∞—Å <url>', '!+–ê—Å <url>'])
async def asus(message: Message, url: str):
    if message.from_id not in owners:
        return
    user = get_user_id(url)[0]
    targ = await get_user_name(user)
    if user in owners:
        return
    if user in blocked_users:
        await message.answer(f'{targ} —É–∂–µ –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.answer(f'–î–æ–±–∞–≤–∏–ª {targ} –≤ —Å–ø–∞–º-–ª–∏—Å—Ç.')
    blocked_users.append(user)
    save_blocked_users(blocked_users)

@bot.on.message(text=['!-–∞—Å <url>', '!-–ê—Å <url>'])
async def asus(message: Message, url: str):
    if message.from_id not in owners:
        return
    user = get_user_id(url)[0]
    targ = await get_user_name(user)
    if user in owners:
        return
    if user not in blocked_users:
        await message.answer(f'{targ} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
        return
    await message.answer(f'–£–¥–∞–ª–∏–ª {targ} –∏–∑ —Å–ø–∞–º-–ª–∏—Å—Ç–∞.')
    blocked_users.remove(user)
    save_blocked_users(blocked_users)

@bot.on.message(text='!–∞—Å–∏–Ω—Ñ–∞')
async def infoas(message: Message):
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    if user_id not in owners:
        return
    if user_id == message.from_id:
        print('')
    if user_id in blocked_users:
        await message.answer(f'üìí {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
    if user_id not in blocked_users:
        await message.answer(f'üìí {target} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')

@bot.on.message(text='!–∞—Å–∏–Ω—Ñ–∞ <url>')
async def infoas(message: Message, url: str):
    user_id = get_user_id(url)
    target = await get_user_name(user_id)
    if user_id not in owners:
        return
    if user_id == message.from_id:
        print('')
    if user_id in blocked_users:
        await message.answer(f'üìí {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')
    if user_id not in blocked_users:
        await message.answer(f'üìí {target} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∞–º-–ª–∏—Å—Ç–µ.')

@bot.on.message(text=["–≤–∫–ª—é—á–∏—Ç—å–∫–∏–∫–≤—Å–µ—Ö", '–í–∫–ª—é—á–∏—Ç—å–∫–∏–∫–≤—Å–µ—Ö'])
async def enable_kick_all(message: Message):
    global kick_all_enabled
    if message.from_id in super_owners:
        kick_all_enabled = True
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ ¬´–∫–∏–∫–≤—Å–µ—Ö¬ª —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.on.message(text=["–≤—ã–∫–ª—é—á–∏—Ç—å–∫–∏–∫–≤—Å–µ—Ö", '–í—ã–∫–ª—é—á–∏—Ç—å–∫–∏–∫–≤—Å–µ—Ö'])
async def disable_kick_all(message: Message):
    global kick_all_enabled
    if message.from_id in super_owners:
        kick_all_enabled = False
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ ¬´–∫–∏–∫–≤—Å–µ—Ö¬ª —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.on.message(text=["–∫–∏–∫–≤—Å–µ—Ö", '–ö–∏–∫–≤—Å–µ—Ö'])
async def kick_all(message: Message):
    global kick_all_enabled
    if kick_all_enabled:
        if message.from_id in super_owners:
            sender = message.from_id
            send = await get_user_name(sender)
            chat_info = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
            members_count = chat_info.items[0].chat_settings.members_count
            chat_id = message.peer_id - 2000000000
            profiles = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
            await message.answer(f'{send} –∑–∞–ø—É—Å–∫–∞–µ—Ç —á–∏—Å—Ç–∫—É –≤—Å–µ–≥–æ —á–∞—Ç–∞. –ù–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.')
            time.sleep(3)
            for profile in profiles.profiles:
                if profile.id > 0:
                    try:
                        await bot.api.messages.remove_chat_user(
                            chat_id=chat_id,
                            member_id=profile.id
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {profile.id}: {e}")
            await message.answer("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —á–∞—Ç–∞.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ ¬´–∫–∏–∫–≤—Å–µ—Ö¬ª –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n–í–∫–ª—é—á–∏—Ç—å –µ–µ: –≤–∫–ª—é—á–∏—Ç—å–∫–∏–∫–≤—Å–µ—Ö")

@bot.on.message(text=['—Ä–µ—à–∏ <equation>', '–†–µ—à–∏ <equation>'])
async def solve_equation(message: Message, equation: str):
    try:
        result = eval(equation)
        await message.answer(f"‚åõ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        error_message = f"‚ö† –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –í–æ—Ç –ø—Ä–∏–º–µ—Ä:\n —Ä–µ—à–∏ 5+5"
        await message.reply(error_message)

@bot.on.message(text=['–ø–æ–≥–æ–¥–∞ <city>', '–ü–æ–≥–æ–¥–∞ <city>'])
async def weather_info(message: Message, city: str):
    try:
        observation = mgr.weather_at_place(city)
        w = observation.weather
        temperature = w.temperature('celsius')["temp"]
        wind = w.wind()["speed"]
        humidity = w.humidity
        status = w.detailed_status.lower()
        translated_status = status_translation.get(status, status)
        emoji = status_emojis.get(translated_status, '')
        local_time = datetime.now()
        response = (
            f"‚òÅ –ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ ¬´{city}¬ª:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"‚õ± –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/—Å\n"
            f"üåß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"{emoji} –°—Ç–∞—Ç—É—Å: {translated_status}"
        )

        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚òï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ: {str(e)}")

@bot.on.message(text=['–º—É–∑—ã–∫–∞ <author>', '–ú—É–∑—ã–∫–∞ <author>'])
async def handle_music(message: Message, author: str):
    try:
        response = await api.request("audio.search", {"q": author, "count": 50})
        if 'response' in response and 'items' in response['response']:
            tracks = response['response']['items']
            if tracks:
                random_tracks = random.sample(tracks, 5)
                attachments = ",".join([f"audio{track['owner_id']}_{track['id']}" for track in random_tracks])
                await message.reply(f"‚åõ –í–æ—Ç 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –æ—Ç ¬´{author}¬ª:\n\n", attachment=attachments)
            else:
                await message.answer(f"‚åõ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç—Ä–µ–∫–∏ –æ—Ç ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {str(e)}")

@bot.on.chat_message(text=['—á–∞—Ç–∏–Ω—Ñ–æ', '–ß–∞—Ç–∏–Ω—Ñ–æ'])
async def get_chat_info(message: Message):
    try:
        chat_info = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
        chat_title = chat_info.items[0].chat_settings.title
        members = chat_info.items[0].chat_settings.members_count
        profiles = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        male_count = 0
        female_count = 0

        for member in profiles.profiles:
            if member.sex == 2:
                male_count += 1
            elif member.sex == 1:
                female_count += 1

        bot_count = members - (male_count + female_count)

        await message.answer(
            f"üÜî: {message.peer_id - int(2e9)}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat_title}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∂—á–∏–Ω: {male_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–Ω—â–∏–Ω: {female_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ—Å—Ç–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ): {bot_count}"
        )

    except Exception as e:
        error_message = f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        await message.answer(error_message)

@bot.on.message(text=['—Ä–∞–Ω–¥–æ–º <number:int>', '–†–∞–Ω–¥–æ–º <number:int>'])
async def random_number(message: Message, number: int):
    user_id = message.from_id
    random_num = random.randint(0, number)
    await message.answer(f"üíé –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ {number} —ç—Ç–æ {random_num}")

@bot.on.message(text=['—Ä–∞–Ω–¥–æ–º <from_number:int> <to_number:int>', '–†–∞–Ω–¥–æ–º <from_number:int> <to_number:int>'])
async def random_number_range(message: Message, from_number: int, to_number: int):
    user_id = message.from_id
    if from_number >= to_number:
        print('')
        return
    random_num = random.randint(from_number, to_number)
    await message.answer(f"üíé–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {from_number} –¥–æ {to_number} —ç—Ç–æ {random_num}")

@bot.on.message(text=["—Ä–µ–≥–≤—Å–µ—Ö", "–†–µ–≥–≤—Å–µ—Ö"])
async def handle_greeting(message: Message):
    if message.from_id not in owners:
        return
    chat_info = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
    members = chat_info.items[0].chat_settings.members_count
    profiles = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    registered_count = 0 
    for profile in profiles.profiles:
        user_id = profile.id
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        user_data = cursor.fetchone()
        if user_data is None:
            cursor.execute("INSERT INTO users (user_id, candies, last_bonus) VALUES (?, ?, ?)",
                           (user_id, 0, 0))
            conn.commit()
            print(f"‚ôª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            registered_count += 1
    await message.reply(f'–ë—ã–ª–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {registered_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

@bot.on.message(text=["/reg"])
async def register_user(message: Message):
    if message.from_id not in owners:
        return
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        cursor.execute("INSERT INTO users (user_id, candies, last_bonus) VALUES (?, ?, ?)", (user_id, 0, 0))
        conn.commit()
        await message.answer(f"‚ôª –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target}!")
    else:
        await message.answer(f"‚ôª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

@bot.on.message(text=["/reg <url>"])
async def register_user(message: Message, url: str):
    if message.from_id not in owners:
        return
    user_id = get_user_id(url)[0]
    target = await get_user_name(user_id)
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data is None:
        cursor.execute("INSERT INTO users (user_id, candies, last_bonus) VALUES (?, ?, ?)", (user_id, 0, 0))
        conn.commit()
        await message.answer(f"‚ôª –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target}!")
    else:
        await message.answer(f"‚ôª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

@bot.on.message(text=["–ø–µ—Ä–µ–¥–∞—Ç—å <amount:int> <url>", "–ü–µ—Ä–µ–¥–∞—Ç—å <amount:int> <url>"])
async def handle_transfer_with_comment(message: Message, amount: int, url: str):
    from_user_id = message.from_id
    to_user_id = get_user_id(url)[0]
    target = await get_user_name(to_user_id)
    if to_user_id is not None:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (from_user_id,))
        from_user_data = cursor.fetchone()
        cursor.execute("SELECT * FROM users WHERE user_id=?", (to_user_id,))
        to_user_data = cursor.fetchone()
        if from_user_data is not None and to_user_data is not None:
            from_user_candies = from_user_data[1]
            if from_user_candies >= amount:
                to_user_candies = to_user_data[1]
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (from_user_candies - amount, from_user_id))
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (to_user_candies + amount, to_user_id))
                conn.commit()
                await message.answer(f"‚úÖ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç–æ–∫ –¥–ª—è {target}!")
                await notify_receiver(to_user_id, from_user_id, amount)
            else:
                await message.answer("üòì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        else:
            await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.on.message(text=["–≤—ã–¥–∞—Ç—å <amount:int>", '–í—ã–¥–∞—Ç—å <amount:int>'])
async def handle_transfer_with_comment(message: Message, amount: int):
    if message.from_id not in owners:
        return
    from_user_id = await user_id_get_mes(message)
    to_user_id = await user_id_get_mes(message)
    target = await get_user_name(to_user_id)
    if to_user_id is not None:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (from_user_id,))
        from_user_data = cursor.fetchone()
        cursor.execute("SELECT * FROM users WHERE user_id=?", (to_user_id,))
        to_user_data = cursor.fetchone()
        if from_user_data is not None and to_user_data is not None:
            from_user_candies = from_user_data[1]
            if from_user_candies >= 0:
                to_user_candies = to_user_data[1]
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (to_user_candies + amount, to_user_id))
                conn.commit()
                await message.answer(f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ {target} {amount} –∫–æ–Ω—Ñ–µ—Ç–æ–∫!")
            else:
                await message.answer("üòì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        else:
            await message.answer("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.on.message(text=["–≤—ã–¥–∞—Ç—å <amount:int> <url>", "–í—ã–¥–∞—Ç—å <amount:int> <url>"])
async def handle_transfer_with_comment(message: Message, amount: int, url: str):
    if message.from_id not in owners:
        return
    from_user_id = message.from_id
    to_user_id = get_user_id(url)[0]
    target = await get_user_name(to_user_id)
    if to_user_id is not None:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (from_user_id,))
        from_user_data = cursor.fetchone()
        cursor.execute("SELECT * FROM users WHERE user_id=?", (to_user_id,))
        to_user_data = cursor.fetchone()
        if from_user_data is not None and to_user_data is not None:
            from_user_candies = from_user_data[1]
            if from_user_candies >= 0:
                to_user_candies = to_user_data[1]
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (to_user_candies + amount, to_user_id))
                conn.commit()
                await message.answer(f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ {target} {amount} –∫–æ–Ω—Ñ–µ—Ç–æ–∫!")
            else:
                await message.answer("üòì –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ñ–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        else:
            await message.answer("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.on.message(text=["–ø–µ—Ä–µ–¥–∞—Ç—å <amount:int>", "–ü–µ—Ä–µ–¥–∞—Ç—å <amount:int>"])
async def handle_transfer_with_comment(message: Message, amount: int):
    from_user_id = message.from_id
    to_user_id = await user_id_get_mes(message)
    target = await get_user_name(to_user_id)
    if to_user_id is not None:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (from_user_id,))
        from_user_data = cursor.fetchone()
        cursor.execute("SELECT * FROM users WHERE user_id=?", (to_user_id,))
        to_user_data = cursor.fetchone()
        if from_user_data is not None and to_user_data is not None:
            from_user_candies = from_user_data[1]
            if from_user_candies >= amount:
                to_user_candies = to_user_data[1]
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (from_user_candies - amount, from_user_id))
                cursor.execute("UPDATE users SET candies=? WHERE user_id=?", (to_user_candies + amount, to_user_id))
                conn.commit()
                await message.answer(f"‚úÖ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {amount} –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç –¥–ª—è {target}!")
                await notify_receiver(to_user_id, from_user_id, amount)
            else:
                await message.answer("‚ò¢ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        else:
            await message.answer(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.on.message(text=["–º–µ—à–æ–∫", '–ú–µ—à–æ–∫'])
async def handle_bag(message: Message):
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user_data = cursor.fetchone()
    if user_data is not None:
        candies = user_data[1]
        await message.answer(
            f"‚ò¢ –£ {target} –≤ –º–µ—à–∫–µ {candies} –∫–æ–Ω—Ñ–µ—Ç!")
    else:
        await message.answer(
            f"üóØ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –ø–æ–∫–∞ –Ω–µ—Ç –†–∏–æ-–ö–æ–Ω—Ñ–µ—Ç–æ–∫.")

@bot.on.message(text=["–º–µ—à–æ–∫ <url>", "–ú–µ—à–æ–∫ <url>"])
async def handle_other_user_bag(message: Message, url: str):
    user_id = get_user_id(url)[0]
    target = await get_user_name(user_id)
    if user_id is not None:
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        user_data = cursor.fetchone()
        if user_data is not None:
            candies = user_data[1]
            await message.answer(f"‚ò¢ –£ {target} –≤ –º–µ—à–∫–µ {candies} –∫–æ–Ω—Ñ–µ—Ç.")
        else:
            await message.answer(f"üë§ –£ {target} –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ç –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.on.message(text=["–û—á–∏—Å—Ç–∏—Ç—å—Ç–æ–ø", '–æ—á–∏—Å—Ç–∏—Ç—å—Ç–æ–ø'])
async def handle_clear_top(message: Message):
    if message.from_id in owners:
        cursor.execute("UPDATE users SET candies=0")
        conn.commit()
        await message.answer("üîë –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–Ω—Ñ–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")
    else:
        await message.answer("üîë –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–±—Ä–æ—Å—É —Ç–æ–ø–∞.")

@bot.on.message(text=["—Ç–æ–ø", '–¢–æ–ø'])
async def top_command(message: Message):
    top_message = await generate_top_message()
    candies = await get_user_candies(message.from_id)
    top_message += f"\n\n‚ò¢ –í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç: {candies}."
    print(top_message)
    await message.answer(top_message)

@bot.on.message(text=["+–∑–∞–º–µ—Ç–∫–∞ <title>\n<text>"])
async def add_note(message: Message, title: str, text: str):
    if message.from_id not in owners:
        return
    if len(title) == 1 and title.isdigit():
        await message.answer("üìñ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä—ã.")
        return
    notes = load_notes()
    for note in notes:
        if note["title"] == title:
            await message.answer(f"üìñ –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{title}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
    notes.append({"title": title, "content": text})
    save_notes(notes)
    await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

@bot.on.message(text=["-–∑–∞–º–µ—Ç–∫–∞ <title_or_number>"])
async def remove_note(message: Message, title_or_number: str):
    if message.from_id not in owners:
        return
    notes = load_notes()
    if title_or_number.isdigit():
        note_number = int(title_or_number)
        if 0 < note_number <= len(notes):
            title = notes[note_number - 1]["title"]
            del notes[note_number - 1]
            save_notes(notes)
            await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("üìñ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    else:
        for note in notes:
            if note["title"] == title_or_number.strip():
                notes.remove(note)
                save_notes(notes)
                await message.answer(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ ¬´{title_or_number}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                return
        await message.answer(f"üìñ –ó–∞–º–µ—Ç–∫–∞ ¬´{title_or_number}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.on.message(text=["–∑–∞–º–µ—Ç–∫–∏", "–ó–∞–º–µ—Ç–∫–∏"])
async def list_notes(message: Message):
    notes = load_notes()
    if notes:
        notes_list = "\n".join([f"{i + 1}. {note['title']}" for i, note in enumerate(notes)])
        await message.answer("üìñ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫:\n" + notes_list)
    else:
        await message.answer("üìñ –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.")

@bot.on.message(text=["–∑–∞–º–µ—Ç–∫–∞ <title_or_number>", "–ó–∞–º–µ—Ç–∫–∞ <title_or_number>"])
async def show_note_by_title_or_number(message: Message, title_or_number: str):
    notes = load_notes()
    if title_or_number.isdigit():
        note_number = int(title_or_number)
        if 0 < note_number <= len(notes):
            note = notes[note_number - 1]
            await message.answer(f"üìñ –ó–∞–º–µ—Ç–∫–∞ ¬´{note['title']}¬ª:\n{note['content']}")
        else:
            await message.answer("üìñ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")
    else:
        for note in notes:
            if note["title"] == title_or_number.strip():
                await message.answer(f"üìñ –ó–∞–º–µ—Ç–∫–∞ ¬´{note['title']}¬ª:\n{note['content']}")
                return
        await message.answer(f"üìñ –ó–∞–º–µ—Ç–∫–∞ ¬´{title_or_number}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.on.message(text=["+–ø—Ä–∞–≤–∏–ª–∞ <text>"])
async def add_rules(message: Message, text: str):
    if message.from_id not in owners:
        return
    save_rules(text)
    await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@bot.on.message(text=["-–ø—Ä–∞–≤–∏–ª–∞"])
async def remove_rules(message: Message):
    if message.from_id not in owners:
        return
    save_rules("")
    await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ —É–¥–∞–ª–µ–Ω—ã.")

@bot.on.message(text=["–ø—Ä–∞–≤–∏–ª–∞", "–ü—Ä–∞–≤–∏–ª–∞"])
async def show_rules(message: Message):
    rules = load_rules()
    if rules:
        await message.answer("üìñ –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n" + rules)
    else:
        await message.answer("üìñ –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

@bot.on.message(text=["–∫–æ–º–∞–Ω–¥—ã", "–ö–æ–º–∞–Ω–¥—ã"])
async def help(message: Message):
    await message.answer('üí¨ –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: vk.com/@-224827653-commands')

@bot.on.message(text=["!–∞–≥"])
async def help(message: Message):
    if message.from_id not in super_owners:
        return
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    if user_id in owners:
        await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–∂–µ –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.')
        return
    owners.append(user_id)
    await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ –∞–≥–µ–Ω—Ç–∞.')

@bot.on.message(text=["!-–∞–≥"])
async def help(message: Message):
    if message.from_id not in super_owners:
        return
    user_id = await user_id_get_mes(message)
    target = await get_user_name(user_id)
    if user_id not in owners:
        await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≥–µ–Ω—Ç–æ–≤.')
        return
    if user_id in super_owners:
        await message.answer(f'ü¶ã –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ä–∞–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—é.')
        return
    owners.remove(user_id)
    await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} —Å–Ω—è—Ç —Ä–∞–Ω–≥ –∞–≥–µ–Ω—Ç–∞.')

@bot.on.message(text=["!–∞–≥ <url>"])
async def help(message: Message, url: str):
    if message.from_id not in super_owners:
        return
    user_id = get_user_id(url)[0]
    target = await get_user_name(user_id)
    if user_id in owners:
        await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–∂–µ –Ω–∞ —ç—Ç–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.')
        return
    owners.append(user_id)
    await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –≤—ã–¥–∞–Ω —Ä–∞–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤.')

@bot.on.message(text=["!-–∞–≥ <url>"])
async def help(message: Message, url: str):
    if message.from_id not in super_owners:
        return
    user_id = get_user_id(url)[0]
    target = await get_user_name(user_id)
    if user_id not in owners:
        await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≥–µ–Ω—Ç–æ–≤.')
        return
    if user_id in super_owners:
        await message.answer(f'ü¶ã –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ä–∞–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—é.')
        return
    owners.remove(user_id)
    await message.answer(f'ü¶ã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} —Å–Ω—è—Ç —Ä–∞–Ω–≥ –∞–≥–µ–Ω—Ç–∞.')

@bot.on.message(text=["–ø–æ–º–æ—â—å", '–ü–æ–º–æ—â—å'])
async def show_admins(message: Message):
    admins_info = []
    for user_id in owners:
        user_info = await bot.api.users.get(user_ids=user_id)
        user_name = f"{user_info[0].first_name} {user_info[0].last_name}"
        user_link = f"[id{user_id}|{user_name}]"
        admins_info.append(user_link)
    admins_text = "\n".join(admins_info)
    greeting_text = "üìå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: (—Å—Å—ã–ª–∫–∞)\n\n"
    if admins_text:
        await message.answer(greeting_text + "üìÉ –ê–≥–µ–Ω—Ç—ã –ø–æ–º–æ—â–∏:\n" + admins_text)
    else:
        await message.answer(greeting_text + "ü¶ã –ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤.")

@bot.on.message(text=['—Å—Ç–∞—Ç–∞', '–°—Ç–∞—Ç–∞'])
async def show_stats(message: Message):
    stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–û–û–ë–©–ï–ù–ò–Ø–ú –ó–ê –í–°–Å –í–†–ï–ú–Ø:\n"
    sorted_statistics = sorted(statistics, key=lambda x: x["count"], reverse=True)[:30]
    for idx, user_stats in enumerate(sorted_statistics, start=1):
        user_info = await bot.api.users.get(user_ids=user_stats["user_id"])
        user_link = f"https://vk.com/id{user_stats['user_id']}"
        stats_text += f"{idx}. [{user_link}|{user_info[0].first_name} {user_info[0].last_name}] ‚Äì {user_stats['count']}\n"
    total_messages = sum(user_stats["count"] for user_stats in statistics)
    stats_text += f"\nüìñ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_messages}"
    await message.answer(stats_text)

@bot.on.message(text=["–æ—á–∏—Å—Ç–∏—Ç—å—Å—Ç–∞—Ç—É", '–û—á–∏—Å—Ç–∏—Ç—å—Å—Ç–∞—Ç—É'])
async def clear_static_file(message: Message):
    if message.from_id in super_owners:
        try:
            os.remove('static.json')
            await message.answer("‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã.")
        except FileNotFoundError:
            await message.answer("–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        print('')

@bot.on.message(text=["–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç", '–æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç'])
async def obnova_chata(message: Message):
    if message.from_id not in owners:
        return
    message.asnwer('üóÉ –°–≤–µ–¥–µ–Ω–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –±—ã–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.')
    chat_info_response = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
    chat_info = chat_info_response.items[0]
    members_count = chat_info.chat_settings.members_count
    chat_id = message.peer_id - 2000000000
    profiles_response = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
    profiles = profiles_response.profiles
    filtered_profiles = [profile for profile in profiles if profile.id not in blocked_users]
    for profile in profiles:
        if profile.id in blocked_users:
            try:
                target = await get_user_name(profile.id)
                await message.ctx_api.request("messages.removeChatUser", {"member_id": profile.id, "chat_id": chat_id})
                await message.answer(f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
            except ZeroDivisionError:
                print('')

@bot.on.chat_message(ChatActionRule(MessagesMessageActionStatus.CHAT_INVITE_USER.value))
async def invitedbot(message: Message) -> None:
    if (
        message.action is not None
        and message.group_id is not None
        and message.action.member_id > 0
    ):
        user_id = message.action.member_id
        target = await get_user_name(user_id)
        if user_id in blocked_users:
            chat_id = message.peer_id - 2000000000
            await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": chat_id})
            await message.answer(f"üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.")
        else:
            await message.answer("""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É.""")

@bot.on.message()
async def handle_message(message: Message):
    if message.from_id > 0:
        user_id = message.from_id
        target = await get_user_name(user_id)
        if user_id in blocked_users:
            try:
                await message.ctx_api.request("messages.removeChatUser", {"member_id": user_id, "chat_id": message.peer_id - 2000000000})
                await message.answer(f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                return
            except ZeroDivisionError:
                print('')
        chat_info_response = await bot.api.messages.get_conversations_by_id(peer_ids=[message.peer_id], extended=1)
        chat_info = chat_info_response.items[0]
        members_count = chat_info.chat_settings.members_count
        chat_id = message.peer_id - 2000000000
        profiles_response = await bot.api.messages.get_conversation_members(peer_id=message.peer_id)
        profiles = profiles_response.profiles
        filtered_profiles = [profile for profile in profiles if profile.id not in blocked_users]
        for profile in profiles:
            if profile.id in blocked_users:
                try:
                    target = await get_user_name(profile.id)
                    await message.ctx_api.request("messages.removeChatUser", {"member_id": profile.id, "chat_id": chat_id})
                    await message.answer(f'üö∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –±–µ—Å–µ–¥—ã.')
                except ZeroDivisionError:
                    print('')
        registered_count = 0
        for profile in filtered_profiles:
            user_id = profile.id
            cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
            user_data = cursor.fetchone()
            if user_data is None:
                cursor.execute("INSERT INTO users (user_id, candies, last_bonus) VALUES (?, ?, ?)",
                               (user_id, 0, 0))
                conn.commit()
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
                registered_count += 1

bot.run_forever()
